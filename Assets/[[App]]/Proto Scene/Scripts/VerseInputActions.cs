//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/[[App]]/Proto Scene/Scripts/VerseInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VerseInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VerseInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VerseInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""13a77f1b-ce03-4ac5-ae96-05aa1c9c656d"",
            ""actions"": [
                {
                    ""name"": ""VoiceBroadcastGlobal"",
                    ""type"": ""Button"",
                    ""id"": ""849b63f0-2a77-422b-9f52-673c0389d8f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4b60a4a7-dc8f-4d18-84ed-1aefbf71ae1e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""476dfff9-0932-4df6-9a91-b022dba24b2c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WorldPointer"",
                    ""type"": ""Button"",
                    ""id"": ""eef2344c-0811-44cb-8bc7-28ad10cc26c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1.401298E-45)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b8182c0e-42fc-4539-bb5e-7c4d09c64420"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VoiceBroadcastGlobal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfa59ee8-b2be-4043-aa96-b7d34ea9eba1"",
                    ""path"": ""<WebXRControllerRight>/primaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VoiceBroadcastGlobal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d366ee98-2199-4e38-9123-91048e8ee173"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VoiceBroadcastGlobal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1bd3d5b-1eaa-4d0f-960a-d41177e071f6"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45ad5009-a50b-4747-9847-d13b45f9fd7b"",
                    ""path"": ""<WebXRControllerLeft>/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8311b1db-d1e7-4750-a830-8a215f39608c"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30acd293-ec0d-4eaf-a276-cccf418d08ad"",
                    ""path"": ""<WebXRControllerRight>/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""968095ef-67e9-4903-b212-f217980452ed"",
                    ""path"": ""<WebXRControllerRight>/triggerButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldPointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3c486a6-8bcd-4ee1-86b1-250cc571c772"",
                    ""path"": ""<XRController>{RightHand}/triggerButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldPointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f58ef358-807d-43a7-ada7-b579a7a9fc01"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldPointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_VoiceBroadcastGlobal = m_Player.FindAction("VoiceBroadcastGlobal", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Turn = m_Player.FindAction("Turn", throwIfNotFound: true);
        m_Player_WorldPointer = m_Player.FindAction("WorldPointer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_VoiceBroadcastGlobal;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Turn;
    private readonly InputAction m_Player_WorldPointer;
    public struct PlayerActions
    {
        private @VerseInputActions m_Wrapper;
        public PlayerActions(@VerseInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @VoiceBroadcastGlobal => m_Wrapper.m_Player_VoiceBroadcastGlobal;
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Turn => m_Wrapper.m_Player_Turn;
        public InputAction @WorldPointer => m_Wrapper.m_Player_WorldPointer;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @VoiceBroadcastGlobal.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnVoiceBroadcastGlobal;
                @VoiceBroadcastGlobal.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnVoiceBroadcastGlobal;
                @VoiceBroadcastGlobal.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnVoiceBroadcastGlobal;
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Turn.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurn;
                @WorldPointer.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWorldPointer;
                @WorldPointer.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWorldPointer;
                @WorldPointer.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWorldPointer;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @VoiceBroadcastGlobal.started += instance.OnVoiceBroadcastGlobal;
                @VoiceBroadcastGlobal.performed += instance.OnVoiceBroadcastGlobal;
                @VoiceBroadcastGlobal.canceled += instance.OnVoiceBroadcastGlobal;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @WorldPointer.started += instance.OnWorldPointer;
                @WorldPointer.performed += instance.OnWorldPointer;
                @WorldPointer.canceled += instance.OnWorldPointer;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnVoiceBroadcastGlobal(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnWorldPointer(InputAction.CallbackContext context);
    }
}
